{"version":3,"sources":["images/dummy.pdf","utils/sanityIO.js","utils/colorUtils.js","components/GalleryItem.jsx","containers/Gallery.jsx","containers/ProjectView.jsx","utils/navUtils.js","containers/NavBar.jsx","containers/CVView.jsx","containers/CV2.jsx","App.jsx","serviceWorker.js","index.jsx","../node_modules/pdfjs-dist/build sync"],"names":["module","exports","client","require","sanityClient","projectId","dataset","token","useCdn","serializers","types","code","props","data-language","node","language","builder","imageUrlBuilder","urlFor","source","image","getCategoryTextClass","cat","catContainerClass","getCategoryContainerClass","BlockContent","GalleryItem","catTags","SLUG","data","slug","current","url","mainImage","width","height","blur","useEffect","d3","style","categories","join","className","id","onClick","handleItemClick","title","blocks","thumbnailText","Gallery","useState","projects","setProjects","fetch","then","results","console","log","handleGalleryItemSelect","galleryItemList","map","el","key","_id","ProjectView","pageContent","projectData","setProjectData","query","match","params","length","hasOwnProperty","carouselImgJSX","carouselImages","_key","src","infoTableItems","field","fieldName","fieldLabel","href","target","color","body","dynamicHeight","setNav","index","parentNav","document","getElementById","menuSliderClick","parentStart","getBoundingClientRect","x","theEl","menuSliderMarginLeft","menuSliderWidth","offsetWidth","marginLeft","NavBar","items","React","forEach","item","classed","selectedValue","to","textDecoration","window","location","pdfjs","GlobalWorkerOptions","workerSrc","version","CV2","App","pageNumber","setProjectLoaded","urlPath","pathname","split","history","push","path","exact","render","component","Boolean","hostname","ReactDOM","basename","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","e","Error","keys","resolve"],"mappings":"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","file":"static/js/main.0127fcbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dummy.2942bfab.pdf\";","import React from 'react';\nimport imageUrlBuilder from '@sanity/image-url';\n\nconst sanityClient = require('@sanity/client');\nexport const client = sanityClient({\n  projectId: '3ptjvz2p',\n  dataset: 'production',\n  token: '',\n  useCdn: false,\n});\n\nexport const serializers = {\n  types: {\n    code: props => (\n      <pre data-language={props.node.language}>\n        <code>{props.node.code}</code>\n      </pre>\n    ),\n  },\n};\n\nconst builder = imageUrlBuilder(client);\n\nexport const urlFor = source => {\n  return builder.image(source);\n};\n","export const getCategoryTextClass = cat => {\n  let catContainerClass;\n  switch (cat) {\n    case 'Web Development':\n      catContainerClass = 'accent-green-text';\n      break;\n    case 'Data Visualization':\n      catContainerClass = 'accent-blue-text';\n      break;\n    case 'Immersive Installation':\n      catContainerClass = 'accent-orange-text';\n      break;\n    case 'Misc.':\n      catContainerClass = 'accent-purple-text';\n      break;\n    default:\n      catContainerClass = 'accent-purple-text ';\n      break;\n  }\n\n  return catContainerClass;\n};\n\nexport const getCategoryContainerClass = cat => {\n  let catContainerClass;\n  switch (cat) {\n    case 'Web Development':\n      catContainerClass = 'white-on-accent-green';\n      break;\n    case 'Data Visualization':\n      catContainerClass = 'white-on-accent-blue';\n      break;\n    case 'Immersive Installation':\n      catContainerClass = 'white-on-accent-orange';\n      break;\n    case 'Misc.':\n      catContainerClass = 'white-on-accent-purple';\n      break;\n    default:\n      catContainerClass = 'white-on-accent-purple ';\n      break;\n  }\n\n  return catContainerClass;\n};\n","import React, { useEffect } from 'react';\nimport '../styles/GalleryItem.scss';\nimport { client, serializers, urlFor } from '../utils/sanityIO';\nimport { getCategoryContainerClass } from '../utils/colorUtils';\nimport * as d3 from 'd3-selection';\n\nconst BlockContent = require('@sanity/block-content-to-react');\n\nexport default function GalleryItem(props) {\n  const SLUG = props.data.slug.current;\n\n  const itemClicked = () => {\n    props.handleItemClick(SLUG);\n  };\n\n  const url = urlFor(props.data.mainImage)\n    .width(1200)\n    .height(600)\n    .blur(60)\n    .url();\n\n  useEffect(() => {\n    const sel = d3\n      .select(`#gallery-item-${SLUG}`)\n      .style('background-image', `url(\"${url}\")`);\n  });\n\n  let catTags;\n  if (props.data.categories) {\n    catTags = props.data.categories.join(' / ');\n  } else {\n    catTags = 'Misc.';\n  }\n\n  const catContainerClass = getCategoryContainerClass(catTags);\n\n  return (\n    <div\n      className=\"gallery-item\"\n      id={`gallery-item-${SLUG}`}\n      onClick={itemClicked}\n    >\n      <div className=\"gallery-item-center-text-container\">\n        <div\n          className={`gallery-item-project-category-container ${catContainerClass}`}\n        >\n          {catTags}\n        </div>\n\n        <div className=\"gallery-item-title-and-subtitle-container\">\n          <div className=\"gallery-item-title-container\">{props.data.title}</div>\n          <div className=\"gallery-item-subtitle-container\">\n            <BlockContent\n              blocks={props.data.thumbnailText}\n              serializers={serializers}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { client } from '../utils/sanityIO';\nimport GalleryItem from '../components/GalleryItem';\n\nexport default function Gallery(props) {\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    const query =\n      '*[_type == \"project\"]{ \"categories\": categories[]->title, _id, slug, mainImage, title, thumbnailText, body, year} | order(year desc)';\n    const params = {};\n\n    client.fetch(query, params).then((results) => {\n      console.log(results);\n      setProjects(results);\n    });\n  }, []);\n\n  const handleItemClick = (slug) => {\n    props.handleGalleryItemSelect(slug);\n  };\n\n  const galleryItemList = projects.map((el) => {\n    return (\n      <GalleryItem key={el._id} data={el} handleItemClick={handleItemClick} />\n    );\n  });\n\n  return <div className=\"gallery-container\">{galleryItemList}</div>;\n}\n","import React, { useEffect, useState } from 'react';\nimport { client, serializers, urlFor } from '../utils/sanityIO';\nimport '../styles/ProjectView.scss';\nimport { Carousel } from 'react-responsive-carousel';\nimport { getCategoryTextClass } from '../utils/colorUtils';\nimport styles from 'react-responsive-carousel/lib/styles/carousel.min.css';\n\nconst BlockContent = require('@sanity/block-content-to-react');\n\nexport default function ProjectView(props) {\n  const [projectData, setProjectData] = useState(null);\n\n  useEffect(() => {\n    const query = `*[_type == \"project\" && slug.current == \"${props.match.params.slug}\"]{title, carouselImages, body, link, shownAt, year, client,  \"categories\": categories[]->title}`;\n    const params = {};\n\n    client.fetch(query, params).then(results => {\n      if (results.length === 1) {\n        setProjectData(results[0]);\n      } else {\n        setProjectData([]);\n      }\n    });\n  }, []);\n\n  let pageContent;\n  if (!projectData) {\n    // loading state\n    pageContent = <div>loading...</div>;\n  } else if (projectData.hasOwnProperty('title')) {\n    // display project info\n\n    // gather images from data\n    const carouselImgJSX = projectData.carouselImages.map(el => {\n      const url = urlFor(el).url();\n      return (\n        <div key={el._key}>\n          <img className=\"project-carousel-image\" src={url} />\n        </div>\n      );\n    });\n\n    // gather data from info fields and turn into table\n    const fieldsList = [\n      ['year', 'Year: '],\n      ['client', 'Client: '],\n      ['link', 'Link: '],\n      ['shownAt', 'Shown At: '],\n    ];\n\n    const infoTableItems = fieldsList.map(field => {\n      const [fieldName, fieldLabel] = field;\n      if (projectData[fieldName]) {\n        if (fieldName === 'link') {\n          return (\n            <div className={`project-info-table-cell`} key={fieldName}>\n              {<b>Link: </b>}{' '}\n              <a\n                href={projectData[fieldName]}\n                target=\"_blank\"\n                style={{ color: 'white' }}\n              >\n                {projectData[fieldName]}\n              </a>\n            </div>\n          );\n        } else {\n          return (\n            <div className={`project-info-table-cell`} key={fieldName}>\n              {<b>{fieldLabel}</b>} {projectData[fieldName]}\n            </div>\n          );\n        }\n      }\n    });\n\n    pageContent = (\n      <div className=\"page-content-container\">\n        <span className=\"page-content-title\">{projectData.title}</span>\n\n        <div className=\"project-info-table\">\n          <span\n            className={`project-info-category ${getCategoryTextClass(\n              projectData.categories[0]\n            )}`}\n          >\n            {projectData.categories[0]}\n          </span>\n          {infoTableItems}\n        </div>\n\n        <div className=\"page-content-body\">\n          <BlockContent blocks={projectData.body} serializers={serializers} />\n        </div>\n        <Carousel className=\"images-carousel\" dynamicHeight>\n          {carouselImgJSX}\n        </Carousel>\n      </div>\n    );\n  } else {\n    // project not found\n    pageContent = <div>four oh four</div>;\n  }\n\n  return <div>{pageContent}</div>;\n}\n","export const setNav = index => {\n  const parentNav = document.getElementById('nav');\n  const menuSliderClick = document.getElementById('nav-slide-click');\n  const links = ['projects-nav-link', 'cv-nav-link'];\n\n  const parentStart = parentNav.getBoundingClientRect().x;\n  const theEl = document.getElementById(links[index]);\n\n  const menuSliderMarginLeft = theEl.getBoundingClientRect().x - parentStart;\n  const menuSliderWidth = theEl.offsetWidth;\n\n  menuSliderClick.style.width = menuSliderWidth + 'px';\n  menuSliderClick.style.marginLeft = menuSliderMarginLeft + 'px';\n};\n","import React, { useEffect } from 'react';\nimport '../styles/NavBar.scss';\nimport { setNav } from '../utils/navUtils';\nimport { Link } from 'react-router-dom';\nimport * as d3 from 'd3-selection';\n\nexport default function NavBar(props) {\n  const items = ['#projects-nav-link', '#cv-nav-link'];\n\n  React.useEffect(() => {\n    //clear selected class from all links\n    items.forEach((item) => {\n      d3.select(item).classed('nav-is-selected', false);\n    });\n\n    // now add to selected one\n    d3.select(items[props.selectedValue]).classed('nav-is-selected', true);\n\n    setNav(props.selectedValue);\n  }, [items, props.selectedValue]);\n\n  const handleContactClicked = () => {\n    // console.log('email me!');\n    window.location.href = 'mailto:marcschroeder44@gmail.com';\n  };\n\n  // const handleNameClicked = () => {\n\n  // }\n\n  return (\n    <div className=\"nav-bar-container\">\n      <Link to=\"/\" style={{ textDecoration: 'none' }}>\n        <div className=\"nav-bar-branded-area\">\n          <span className=\"name-text\">Marc Schroeder</span>\n          <span className=\"title-text\"> // Data Visualization Engineer</span>\n        </div>\n      </Link>\n      <div className=\"nav-links-container\">\n        <ul id=\"nav\">\n          <li className=\"nav-link-li\">\n            <Link to={`/`}>\n              <div className=\"nav-link\" id=\"projects-nav-link\">\n                Projects\n              </div>\n            </Link>\n          </li>\n          {/* <li className=\"nav-link-li\">\n            <Link to={`/cv`}>\n              <div className=\"nav-link\" id=\"cv-nav-link\">\n                CV\n              </div>\n            </Link>\n          </li> */}\n          <div className=\"nav-slider\" id=\"nav-slide-click\"></div>\n        </ul>\n        <div className=\"contact-button\" onClick={handleContactClicked}>\n          CONTACT\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport '../styles/CVView.scss';\nimport { Document, Page, pdfjs, StyleSheet } from 'react-pdf';\nimport { client } from '../utils/sanityIO';\nimport PDFlink from '../images/dummy.pdf';\n// import PDFlink from '../images/schroeder_resume-c.pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nexport default function CVView() {\n  const [pdfUrl, setPdfUrl] = useState(null);\n\n  useEffect(() => {\n    const query = '*[_type == \"cv\"]';\n    const params = {};\n    client.fetch(query, params).then(results => {\n      const rawFileName = results[0].cvPdf.asset._ref;\n      const trimmedFilename = rawFileName\n        .replace('file-', '')\n        .replace('-pdf', '');\n      const fileUrl = `https://cdn.sanity.io/files/3ptjvz2p/production/${trimmedFilename}.pdf`;\n      // const fileUrl = `https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf`;\n      setPdfUrl(fileUrl);\n    });\n  }, []);\n\n  // const styles = StyleSheet.create({\n  //   page: {\n  //     width: 300,\n  //   },\n  // });\n\n  let pageContent;\n  if (pdfUrl) {\n    console.log(pdfUrl);\n    pageContent = (\n      <Document className=\"cv-pdf-image\" file={pdfUrl}>\n        <Page pageNumber={1} />\n      </Document>\n    );\n  } else {\n    pageContent = <span>Loading...</span>;\n  }\n\n  return <div className=\"cv-pdf-container\">{pageContent}</div>;\n}\n","import React from 'react';\nimport '../styles/CV2.scss';\n\nexport default function CV2() {\n  return (\n    <div className=\"CV-HTML\">\n      {/* left col */}\n\n      <div className=\"cv-left\">\n        {/* experience */}\n        <h2 className=\"cv-header\">experience</h2>\n        <div className=\"cv-content-block\">\n          {/*  */}\n          <span className=\"cv-experience-location-position\">\n            Design Technologist (contract), Stamen Design, San Francisco, CA\n          </span>\n          <span className=\"cv-experience-timeframe\">\n            May 2019 to Present Day\n          </span>\n          <span className=\"cv-experience-description\">\n            Part Design Thinking. Part Data Science. Two Parts Web Development.\n            Design technologist developing interactive maps and data\n            visualizations on the web. Clients include UC Berkeley, The\n            Berggruen Institute, Dropbox Inc., San Francisco State University,\n            and the Bay Area Air Quality Management District.\n          </span>\n          {/*  */}\n          <span className=\"cv-experience-location-position\">\n            Creative Code Instructor, Gray Area Foundation for the Arts, San\n            Francisco, CA\n          </span>\n          <span className=\"cv-experience-timeframe\">Ongoing</span>\n          <span className=\"cv-experience-description\">\n            Teacher for the Web Audio week of the Gray Area Creative Code\n            Immersive. Class covers basics of electronic music synthesis, music\n            programming in Tone.js, and audio-visual interaction with p5.js.\n          </span>\n          {/*  */}\n          <span className=\"cv-experience-location-position\">\n            Artist In Residence, Gray Area Foundation for the Arts, San\n            Francisco, CA\n          </span>\n          <span className=\"cv-experience-timeframe\">\n            January 2019 to June 2019\n          </span>\n          <span className=\"cv-experience-description\">\n            Designed and developed immersive, room-scale installations blending\n            physical computing, projection mapping, and sound design. Clients\n            include Levy Dance and Google.\n          </span>\n          {/*  */}\n          <span className=\"cv-experience-location-position\">\n            Technologist, Company Cue, New York, NY (Remote)\n          </span>\n          <span className=\"cv-experience-timeframe\">\n            June 2018 to April 2019\n          </span>\n          <span className=\"cv-experience-description\">\n            Developed web tools, processes and database management software for\n            worldwide language translation and original marketing copy.\n          </span>\n          {/*  */}\n          <span className=\"cv-experience-location-position\">\n            Curated Content and Data Producer, Music, Apple, Cupertino, CA\n          </span>\n          <span className=\"cv-experience-timeframe\">May 2014 to May 2018</span>\n          <span className=\"cv-experience-description\">\n            Project manager throughout launch of Apple Music, and Apple Music\n            expansion launches in Israel, South Korea, Turkey, Taiwan, and\n            others. From pre-launch to over 30 million paid subscribers around\n            the world.\n          </span>\n          {/*  */}\n          <span className=\"cv-experience-location-position\">\n            iTunes Programming & Label Relations Intern, Music, Apple,\n            Cupertino, CA\n          </span>\n          <span className=\"cv-experience-timeframe\">2013 to 2014</span>\n        </div>\n\n        {/* Technical Skills */}\n        <h2 className=\"cv-header\">technical skills</h2>\n        <ul className=\"cv-list\">\n          <li className=\"cv-list-item\">\n            <b>Web Development Stack:</b> React.js, d3.js, Mapbox GL JS,\n            Node.js, Parcel\n          </li>\n          <li className=\"cv-list-item\">\n            <b>Data Analysis:</b> Pandas for Python, Seaborn\n          </li>\n          <li className=\"cv-list-item\">\n            <b>Creative Code:</b> Processing (Java), p5.js, Tone.js,\n            Arduino/Physical Computing, Ableton Live\n          </li>\n        </ul>\n\n        {/* Digital Art Exhibitions */}\n        <h2 className=\"cv-header\">digital art exhibitions</h2>\n        <ul className=\"cv-list\">\n          <li className=\"cv-list-item\">\n            <b>MUTEK.SF</b> - Elevator Pitch (A/V Installation) — May 2019\n          </li>\n          <li className=\"cv-list-item\">\n            <b>Gray Area Showcase 2019.1</b> - Core (A/V Installation) — June\n            2019\n          </li>\n          <li className=\"cv-list-item\">\n            <b>Rush V.1</b> - Entrance (A/V Installation) — June 2019\n          </li>\n          <li className=\"cv-list-item\">\n            <b>Gray Area Showcase 2018.2</b> - Elevator Pitch (A/V Installation)\n            — December 2018\n          </li>\n        </ul>\n\n        {/* education */}\n        <h2 className=\"cv-header\">education</h2>\n        <div className=\"cv-content-block\">\n          <span className=\"cv-education\">\n            University of Kansas, Lawrence, Kansas — B.S. Computer Science, 2014\n          </span>\n        </div>\n      </div>\n\n      {/* right col */}\n      <div className=\"cv-right\">\n        <div className=\"cv-contact-info\">\n          <span className=\"cv-info-line\">San Francisco, CA </span>\n          <span className=\"cv-info-line\">(415) 314-9862</span>\n          <span className=\"cv-info-line\">marcschroeder44@gmail.com</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport Gallery from './containers/Gallery';\nimport ProjectView from './containers/ProjectView';\nimport NavBar from './containers/NavBar';\nimport CVView from './containers/CVView';\nimport CV2 from './containers/CV2';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App(props) {\n  const [projectLoaded, setProjectLoaded] = useState(false);\n  const urlPath = props.location.pathname.split('/')[1];\n\n  const handleGalleryItemSelect = (slug) => {\n    props.history.push(`/${slug}`);\n    setProjectLoaded(true);\n  };\n\n  // probably delete this later\n  const navSelect = () => {\n    // props.history.push('/');\n  };\n\n  let pageNumber;\n  switch (urlPath) {\n    case '':\n      pageNumber = 0;\n      break;\n    case 'cv':\n      pageNumber = 1;\n      break;\n    default:\n      pageNumber = 0;\n      break;\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <div className=\"home-left-panel\" onClick={navSelect}> */}\n      <NavBar selectedValue={pageNumber} />\n      {/* </div> */}\n      <div className=\"home-right-panel\">\n        <Switch>\n          <Route\n            path={'/'}\n            exact\n            render={(props) => (\n              <Gallery\n                {...props}\n                handleGalleryItemSelect={handleGalleryItemSelect}\n              />\n            )}\n          />\n          <Route path={'/cv'} component={CV2} />\n          <Route\n            path={'/:slug'}\n            exact\n            render={(props) => <ProjectView {...props} />}\n          />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router basename=\"new-portfolio\">\n    <Route path=\"/\" component={App} />\n  </Router>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 34;"],"sourceRoot":""}